/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
* License: BSD
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*/
tsip_header_WWW_Authenticate.prototype = Object.create(tsip_header.prototype);
%%{
	machine tsip_machine_parser_header_WWW_Authenticate;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";
	
	action tag{
		i_tag_start = p;
	}
	
	action is_digest{
		hdr_WWW_Authenticate.s_scheme = "Digest";
	}

	action is_basic{
		hdr_WWW_Authenticate.s_scheme = "Basic";
	}

	action is_auth{
		tsip_header.call(hdr_WWW_Authenticate, tsip_header_type_e.WWW_Authenticate);
	}

	action is_proxy{
		tsip_header.call(hdr_WWW_Authenticate, tsip_header_type_e.Proxy_Authenticate);
	}

	action parse_realm{
		hdr_WWW_Authenticate.s_realm = tsk_string_unquote_2(tsk_ragel_parser_get_string(s_str, p, i_tag_start));
	}

	action parse_domain{
		hdr_WWW_Authenticate.s_domain = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_nonce{
		hdr_WWW_Authenticate.s_nonce= tsk_string_unquote_2(tsk_ragel_parser_get_string(s_str, p, i_tag_start));
	}

	action parse_opaque{
		hdr_WWW_Authenticate.s_opaque= tsk_string_unquote_2(tsk_ragel_parser_get_string(s_str, p, i_tag_start));
	}

	action parse_stale{
		var s_stale = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
		hdr_WWW_Authenticate.b_stale = tsk_string_iequals(s_stale, "true");
	}

	action parse_algorithm{
		hdr_WWW_Authenticate.s_algorithm = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_qop{
		hdr_WWW_Authenticate.s_qop = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_param{
		tsk_ragel_add_param(s_str, p, i_tag_start, hdr_WWW_Authenticate.ao_params);
	}

	action prev_not_comma{
		prev_not_comma(p)
	}

	action eob{
	}

	#FIXME: Only Digest (MD5, AKAv1-MD5 and AKAv2-MD5) is supported
	other_challenge = (js_any+);
	auth_param = generic_param>tag %parse_param;

	realm = "realm"i EQUAL quoted_string>tag %parse_realm;
	domain = "domain"i EQUAL LDQUOT <: (js_any*)>tag %parse_domain :> RDQUOT;
	nonce = "nonce"i EQUAL quoted_string>tag %parse_nonce;
	opaque = "opaque"i EQUAL quoted_string>tag %parse_opaque;
	stale = "stale"i EQUAL ( "true"i | "false"i )>tag %parse_stale;
	algorithm = "algorithm"i EQUAL <:token>tag %parse_algorithm;
	qop_options = "qop"i EQUAL LDQUOT <: (js_any*)>tag %parse_qop :> RDQUOT;
	
	digest_cln = (realm | domain | nonce | opaque | stale | algorithm | qop_options)@1 | auth_param@0;
	challenge = ( ("Digest"i%is_digest | "Basic"i%is_basic) LWS digest_cln ( (COMMA | CRLF) <:digest_cln )* ) | other_challenge;
	WWW_Authenticate = ("WWW-Authenticate"i>is_auth | "Proxy-Authenticate"i>is_proxy) HCOLON challenge;

	# Entry point
	main := WWW_Authenticate CRLF @eob;

}%%

%%write data;

function tsip_header_WWW_Authenticate(){
	tsip_header.call(this, tsip_header_type_e.WWW_Authenticate);
	this.s_scheme = null;
	this.s_realm = null;
	this.s_domain = null;
	this.s_nonce = null;
	this.s_opaque = null;
	this.b_stale = false;
	this.s_algorithm = null;
	this.s_qop = null;
}

tsip_header_WWW_Authenticate.prototype.toString = function(){
	return tsk_string_format("{0} realm=\"{1}\"{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13},stale={14}{15}{16}", 
		this.s_scheme,
		this.s_realm ? this.s_realm : "",
				
		this.s_domain ? ",domain=\"" : "",
		this.s_domain ? this.s_domain : "",
		this.s_domain ? "\"" : "",
				
				
		this.s_qop ? ",qop=\"" : "",
		this.s_qop ? this.s_qop : "",
		this.s_qop ? "\"" : "",


		this.s_nonce ? ",nonce=\"" : "",
		this.s_nonce ? this.s_nonce : "",
		this.s_nonce ? "\"" : "",

		this.s_opaque ? ",opaque=\"" : "",
		this.s_opaque ? this.s_opaque : "",
		this.s_opaque ? "\"" : "",

		this.b_stale ? "TRUE" : "FALSE",

		this.s_algorithm ? ",algorithm=" : "",
		this.s_algorithm ? this.s_algorithm : ""
		);
}

tsip_header_WWW_Authenticate.prototype.Parse = function(s_str){
	var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;	
	var hdr_WWW_Authenticate = new tsip_header_WWW_Authenticate();
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		tsk_utils_log_error("Failed to parse 'WWW-Authenticate' header: " + s_str);
		return null;
	}
	
	return hdr_WWW_Authenticate;
}
