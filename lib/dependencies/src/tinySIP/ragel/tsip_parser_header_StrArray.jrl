/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
* License: BSD
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*/

// Parse headers: 'Allow', 'Allow-Events', 'Privacy', 'Require', 'Supported'

var TSIP_HEADER_ALLOW_DEFAULT =	"ACK, BYE, CANCEL, INVITE, MESSAGE, NOTIFY, OPTIONS, PRACK, REFER, UPDATE";

tsip_header_StrArray.prototype = Object.create(tsip_header.prototype);
tsip_header_StrArray.prototype.as_values = null;

tsip_header_Allow.prototype = Object.create(tsip_header_StrArray.prototype);
tsip_header_Allow_Events.prototype = Object.create(tsip_header_StrArray.prototype);
tsip_header_Privacy.prototype = Object.create(tsip_header_StrArray.prototype);
tsip_header_Require.prototype = Object.create(tsip_header_StrArray.prototype);
tsip_header_Supported.prototype = Object.create(tsip_header_StrArray.prototype);

%%{
	machine tsip_machine_parser_header_Allow;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";
	
	action tag{
		i_tag_start = p;
	}
	
	action parse_value{
		if(o_hdr){
			tsk_ragel_parser_add_string(s_str, p, i_tag_start, o_hdr.as_values);
		}
	}

	action is_Allow { o_hdr = new tsip_header_Allow(); }
	action is_Allow_Events{ o_hdr = new tsip_header_Allow_Events(); }
	action is_Privacy{ o_hdr = new tsip_header_Privacy(); }
	action is_Require{ o_hdr = new tsip_header_Require(); }
	action is_Supported{ o_hdr = new tsip_header_Supported(); }

	action eob{}

	Allow = ("Allow"i)%is_Allow HCOLON ( Method>tag %parse_value ( COMMA Method>tag %parse_value )* )?;

	event_package = token_nodot;
	event_template = token_nodot;
	event_type = event_package ( "." event_template )*;
	Allow_Events = ( "Allow-Events"i | "u"i )%is_Allow_Events HCOLON event_type>tag %parse_value ( COMMA event_type>tag %parse_value )*;

	priv_value = ("header"i | "session"i | "user"i | "none"i | "critical"i | "id"i | "history"i)@1 | token@0;
	Privacy = ("Privacy"i)%is_Privacy HCOLON priv_value>tag %parse_value ( ";" priv_value>tag %parse_value )*;

	Require = ("Require"i)%is_Require HCOLON option_tag>tag %parse_value ( COMMA option_tag>tag %parse_value )*;

	Supported = ( "Supported"i | "k"i )%is_Supported HCOLON ( option_tag>tag %parse_value ( COMMA option_tag>tag %parse_value )* )?;
	
	# Entry point
	main := (Allow | Allow_Events | Privacy | Require | Supported) :>CRLF @eob;

}%%

%%write data;

function tsip_header_StrArray(e_type, s_value){
	tsip_header.call(this, e_type);
    this.as_values = new Array();
	if(s_value){
		this.as_values.push(s_value);
	}
}

tsip_header_StrArray.prototype.toString = function(){
    var s_str = null;
	var c_sep;
	switch(this.e_type){
		case tsip_header_type_e.Privacy:
			c_sep = ';'; break;
		default: 
			c_sep = ','; 
		break;
	}
    for(var i = 0; i < this.as_values.length; ++i){
        if(i == 0){
            s_str = this.as_values[i];
        }
        else{
            s_str += tsk_string_format("{0}{1}", c_sep, this.as_values[i]);
        }
    }
    return s_str;
};

tsip_header_StrArray.prototype.has_value = function(s_value){
    if(this.as_values && s_value){
        var s_value_i = s_value.toLowerCase();
        for(var i = 0; i < this.as_values.length; ++i){
            if(this.as_values[i].toLowerCase() == s_value_i){
                return true;
            }
        }
    }
    return false;
}

tsip_header_StrArray.prototype.Parse = function(s_str){
    var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;	
	var o_hdr = null;
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		tsk_utils_log_error("Failed to parse header: " + s_str);
		return null;
	}
	
	return o_hdr;
}


function tsip_header_Allow(s_value){ tsip_header_StrArray.call(this, tsip_header_type_e.Allow, s_value); }
function tsip_header_Allow_Events(s_value){ tsip_header_StrArray.call(this, tsip_header_type_e.Allow_Events, s_value); }
function tsip_header_Privacy(s_value){ tsip_header_StrArray.call(this, tsip_header_type_e.Privacy, s_value); }
function tsip_header_Require(s_value){ tsip_header_StrArray.call(this, tsip_header_type_e.Require, s_value); }
function tsip_header_Supported(s_value){ tsip_header_StrArray.call(this, tsip_header_type_e.Supported, s_value); }