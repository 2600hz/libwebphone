/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
* License: BSD
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*/
tsip_header_Via.prototype = Object.create(tsip_header.prototype);
tsip_header_Via.prototype.__s_proto_name_default = "SIP";
tsip_header_Via.prototype.__s_proto_version_default = "2.0";

%%{
	machine tsip_machine_parser_header_Via;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";


	action tag{
		i_tag_start = p;
	}

	action create_via{
		if(!curr_via){
			curr_via = new tsip_header_Via(null, null, null, null, 0);
		}
	}

	action parse_protocol_name{
	    curr_via.s_proto_name = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_protocol_version{
		curr_via.s_proto_version = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_host{
		curr_via.s_host = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
		curr_via.s_host = tsk_string_unquote(curr_via.s_host, '[', ']');
	}

	action parse_port{
	    curr_via.i_port = tsk_ragel_parser_get_int(s_str, p, i_tag_start);
	}

	action parse_transport{
	    curr_via.s_transport = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_ttl{
	    curr_via.i_ttl = tsk_ragel_parser_get_int(s_str, p, i_tag_start);
	}

	action parse_maddr{
	    curr_via.s_maddr = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}
	
	action parse_received{
	    curr_via.s_received = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_branch{
	    curr_via.s_branch = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_comp{
	    curr_via.s_comp = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_rport{
	    curr_via.i_rport = tsk_ragel_parser_get_int(s_str, p, i_tag_start);
	}

	action has_rport{
		if(curr_via.i_rport < 0){
			curr_via.i_rport = 0;
		}
	}

	action parse_param{
	    if(curr_via){
	        tsk_ragel_add_param(s_str, p, i_tag_start, curr_via.ao_params);
	    }
	}
	
	action add_via{
		if(curr_via){
		    hdr_vias.push(curr_via);
		    curr_via = null;
		}
	}

	action eob{
		
	}

	protocol_name = "SIP"i | token >tag %parse_protocol_name;
	protocol_version = token >tag %parse_protocol_version;
	transport = ("UDP"i | "TCP"i | "TLS"i | "SCTP"i | "TLS-SCTP"i | other_transport) >tag %parse_transport;
	sent_protocol = protocol_name SLASH protocol_version SLASH transport;
	sent_by = host>tag %parse_host ( COLON port >tag %parse_port )?;
	via_ttl = "ttl"i EQUAL ttl >tag %parse_ttl;
	via_maddr = "maddr"i EQUAL host >tag %parse_maddr;
	via_received = "received"i EQUAL ( IPv4address | IPv6address )>tag %parse_received;
	via_branch = "branch"i EQUAL token >tag %parse_branch;
	via_compression = "comp"i EQUAL ( "sigcomp"i | other_compression )>tag %parse_comp;
	response_port = "rport"i ( EQUAL DIGIT+ >tag %parse_rport )? %has_rport;
	via_extension = (generic_param) >tag %parse_param;
	via_params = (via_ttl | via_maddr | via_received | via_branch | via_compression | response_port)@1 | (via_extension)@0;
	via_parm = (sent_protocol LWS sent_by ( SEMI via_params )*) >create_via %add_via;
	Via = ( "Via"i | "v"i ) HCOLON via_parm ( COMMA via_parm )*;
	
	# Entry point
	main := Via :>CRLF @eob;
}%%


%%write data;

function tsip_header_Via(s_proto_name, s_proto_version, s_transport, s_host, i_port){
	tsip_header.call(this, tsip_header_type_e.Via);
    this.s_branch = null;
	this.s_host = s_host;
	this.i_port = i_port;
	this.s_comp = null;
	this.s_sigcomp_id = null;
	this.s_received = null;
	this.s_maddr = null;
	this.s_proto_name = s_proto_name;
	this.s_proto_version = s_proto_version;
	this.s_transport = s_transport;
	this.i_rport = -1;
	this.i_ttl = -1;
	this.is_transport_reliable = function(){
		return tsk_string_iequals(this.s_transport, "UDP");
	};
	this.is_transport_unreliable = function(){
		return !this.is_transport_reliable();
	};
}

tsip_header_Via.prototype.toString = function(){
	var b_ipv6 = (this.s_host && tsk_string_contains(this.s_host, this.s_host.length, ":"));

	// SIP/2.0/UDP [::]:1988;test=1234;comp=sigcomp;rport=254;ttl=457;received=192.0.2.101;branch=z9hG4bK1245420841406\r\n"
	return tsk_string_format("{0}/{1}/{2} {3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{14}{15}{16}{17}{18}{19}{20}{21}",

			this.s_proto_name ? this.s_proto_name : "SIP",

			this.s_proto_version ? this.s_proto_version : "2.0",

			this.s_transport ? this.s_transport : "UDP",

			b_ipv6 ? "[" : "",
			this.s_host ? this.s_host : "127.0.0.1",
			b_ipv6 ? "]" : "",

			this.i_port > 0 ? ":" : "",
			this.i_port > 0 ? this.i_port : "",

			this.s_maddr ? ";maddr=" : "",
			this.s_maddr ? this.s_maddr : "",

			this.s_sigcomp_id ? ";sigcomp-id=" : "",
			this.s_sigcomp_id ? this.s_sigcomp_id : "",

			this.s_comp ? ";comp=" : "",
			this.s_comp ? this.s_comp : "",

			this.i_rport>=0 ? (this.i_rport>0?";rport=":";rport") : "",
			this.i_rport>0 ? this.i_rport : "",

			this.i_ttl>=0 ? (this.i_ttl>0?";ttl=":";ttl") : "",
			this.i_ttl>0 ? this.i_ttl : "",

			this.s_received ? ";received=" : "",
			this.s_received ? this.s_received : "",

			this.s_branch ? ";branch=" : "",
			this.s_branch ? this.s_branch : ""
		);
}

// returns an array of 'Via' headers
tsip_header_Via.prototype.Parse = function(s_str){
    var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;
	var hdr_vias = new Array();
	var curr_via = null;
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		tsk_utils_log_error("Failed to parse 'Via' header: " + s_str);
		return null;
	}
	
	return hdr_vias;
}